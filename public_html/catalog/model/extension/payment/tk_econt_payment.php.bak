<?php
class ModelExtensionPaymentTkEcontPayment extends Model{

	public function getMethod($address, $total){
		$this->load->language('extension/payment/tk_econt_payment');

		$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "zone_to_geo_zone WHERE geo_zone_id = '" . (int)$this->config->get('payment_tk_econt_payment_geo_zone_id') . "' AND country_id = '" . (int)$address['country_id'] . "' AND (zone_id = '" . (int)$address['zone_id'] . "' OR zone_id = '0')");

		if($this->config->get('payment_tk_econt_payment_total') > 0 && $this->config->get('payment_tk_econt_payment_total') > $total){
			$status = false;
		} elseif(!$this->config->get('shipping_tk_econt_store_kay')){
			$status = false;
		} elseif(!$this->cart->hasShipping()){
			$status = false;
		} elseif(!$this->config->get('payment_tk_econt_payment_geo_zone_id')){
			$status = true;
		} elseif($query->num_rows){
			$status = true;
		} else{
			$status = false;
		}
		
		$my_referer = isset($_POST['referer']) ? trim($_POST['referer']) : (isset($_SERVER['HTTP_REFERER']) ? base64_encode($_SERVER['HTTP_REFERER']) : false);
		if(strpos($my_referer, 'sale/order/edit') !== false){
			$status = false;
		}
		
		if(!isset($this->session->data['shipping_method'])){
			$status = false;
		} else{
			if($this->session->data['shipping_method']['code'] != 'tk_econt.econt_machine' && $this->session->data['shipping_method']['code'] != 'tk_econt.econt_office' && $this->session->data['shipping_method']['code'] != 'tk_econt.econt_door' ){
				$status = false;
			} 
		}

		$method_data = array();

		if($status){
			$method_data = array(
				'code'       => 'tk_econt_payment',
				'title'      => $this->language->get('text_title'),
				'terms'      => '',
				'sort_order' => $this->config->get('payment_tk_econt_payment_sort_order')
			);
		}

		return $method_data;
	}

	public function updateOrder($data, $token = ''){
		if(isset($this->session->data['tk_econt_payment_paymentToken'])){
			unset($this->session->data['tk_econt_payment_paymentToken']);
		}

		$this->db->query("INSERT INTO " . DB_PREFIX . "tk_econt_payment SET order_id = '" . (int)$data['order_id'] . "', customer_id = '" . (int)$data['customer_id'] . "', payment_token = '" . $this->db->escape($token) . "'");

		return true;

	}
	
	public function updateOrderToken($order_id, $token){
	
		$this->db->query("INSERT INTO " . DB_PREFIX . "tk_econt_payment SET order_id = '" . (int)$order_id . "', payment_token = '" . $this->db->escape($token) . "'");

		return true;

	}
	
	
	public function getOrder($order_id){
			
		$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "tk_econt_order WHERE order_id = '" . (int)$order_id . "'");

		return $query->row;
	}
	
	public function getOrderProducts($order_id){
		$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_product WHERE order_id = '" . (int)$order_id . "'");

		return $query->rows;
	}
	
	public function getOrderOptions($order_id, $order_product_id){
		$query = $this->db->query("SELECT oo.* FROM " . DB_PREFIX . "order_option oo LEFT JOIN " . DB_PREFIX . "product_option po ON po.product_option_id = oo.product_option_id LEFT JOIN " . DB_PREFIX . "option o ON o.option_id = po.option_id WHERE oo.order_id = '" . (int)$order_id . "' AND oo.order_product_id = '" . (int)$order_product_id . "' ORDER BY o.sort_order ASC");

		return $query->rows;
	}
	
	public function getOrderTotals($order_id){
		$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_total WHERE order_id = '" . (int)$order_id . "' ORDER BY sort_order");

		return $query->rows;
	}
	
	public function getOfficeByOfficeCode($office_code){ 
		if(strtolower($this->config->get('config_language')) == 'bg' || strtolower($this->config->get('config_language')) == 'bg-bg'){  
			$suffix = '';
		} else{ 
			$suffix = '_en';
		} 
		
		$query = $this->db->query("SELECT o.office_id, o.city_id, o.office_code, o.name" . $suffix . " AS name, o.address" . $suffix . " AS address, eco.name" . $suffix . " AS office_city, eco.post_code FROM " . DB_PREFIX . "tk_econt_office o LEFT JOIN " . DB_PREFIX . "tk_econt_city eco ON eco.city_id = o.city_id WHERE o.office_code = '" . $office_code . "'");
		

		
		if($query->num_rows == 1){ 
			return $query->row;
		} else{ 
			return false;
		} 
	} 
	
	public function getCustomFieldCompany(){
		if(strtolower($this->config->get('config_language')) == 'bg' || strtolower($this->config->get('config_language')) == 'bg-bg'){ 
			$name = 'Фирма';
		} else{
			$name = 'Company';
		}

		$sql = "SELECT custom_field_id FROM " . DB_PREFIX . "custom_field_description WHERE name = '" . $this->db->escape($name)."' LIMIT 1 ";

		$query = $this->db->query($sql);

		return $query->row;
	}
	
	public function getOrderTotalShipping($order_id){
		$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_total WHERE order_id = '" . (int)$order_id . "' AND code = 'shipping'");

		return $query->row;
	}
	
	//подготвя данните от поръчката за изпращане към еконт
	public function prepareOrder($paymentToken = ''){
		
		$aOrderObject = [];
		$aOrderObject['order'] = [];
		$aOrderObject['orderData'] = [];
		$aOrderObject['customerInfo'] = [];
			
		$order_id = @intval($this->session->data['order_id']);
		if($order_id){

			$this->load->model('checkout/order');
			$orderData = $this->model_checkout_order->getOrder($order_id);
			if($orderData['shipping_code'] == 'tk_econt.econt_machine' || $orderData['shipping_code'] == 'tk_econt.econt_office' || $orderData['shipping_code'] == 'tk_econt.econt_door' ){
				$check_delivery = true;
			} else{
				$check_delivery = false;
			}
			
		
			if(empty($orderData) || $check_delivery == false) return;

			$order_data = $this->getOrder($order_id);
			if(empty($order_data)) return;
		
			if(isset($order_data['office_code']) && $order_data['office_code']){
				$office_data = $this->getOfficeByOfficeCode($order_data['office_code']);
			}
		
			if(isset($office_data) && $office_data){
				$office_name = $office_data['name'];
				$office_address = $office_data['address'];
			} else{
				$office_name = '';
				$office_address = '';
			}
	
			//проверка дали имаме фирма
			$custom_field_id = $this->getCustomFieldCompany();
			if(isset($custom_field_id) && isset($orderData) && isset($orderData['custom_field']) && $orderData['custom_field'] && isset($orderData['custom_field'][$custom_field_id['custom_field_id']]) && $orderData['custom_field'][$custom_field_id['custom_field_id']]){
				$name = $orderData['custom_field'][$custom_field_id['custom_field_id']];
			} else{
				$name = $orderData['firstname'].' '.$orderData['lastname'];
			}
			
			//данни за доставката
			$order_shipping = $this->getOrderTotalShipping($order_id);
			if(!isset($order_shipping['value']) || (isset($order_shipping['value']) && $order_shipping['value'] > 0)){
				$paymentSide = 'default';
			} else {
				$paymentSide = 'sender';
			}
			

			$customerInfo = array(
				'id' => '',
				'name' => $name,
				'face' => $orderData['firstname'] . ' ' . $orderData['lastname'].' -',
				'phone' => $orderData['telephone'],
				'email' => $orderData['email'],
				'countryCode' => 'BGR',
				'cityName' => $order_data['city'],
				'postCode' => $order_data['postcode'],
				'officeCode' => $order_data['office_code'],
				'zipCode' => '',
				'address' => $office_address,
				'quarter' => $order_data['quarter'],
				'street' => $order_data['street'],
				'num' => $order_data['street_num'],
				'other' => $order_data['other']
			);

			$order = array(
				'customerInfo' => $customerInfo,
				'orderNumber' => $order_id,
				'shipmentDescription' => 'Order: '.$order_id,
				'status' => $orderData['order_status'],
				'orderTime' => $orderData['date_added'],
				'currency' => $orderData['currency_code'],
				'cod' => ($orderData['payment_code'] === 'tk_econt_payment'),
				'partialDelivery' => 1,
				'paymentToken' => $paymentToken,
				'paymentSide' => $paymentSide,
				'items' => array()
			);
			
			//данни за продуктите
			$op_order_products = $this->getOrderProducts($order_id);
			$order['items'] = array();
			foreach($op_order_products as $product){
				
				if($this->config->get('shipping_tk_econt_shipment_product_name')){
					$shipment_description .= ' ';
					$shipment_description .= $product['name'] . ' -';
				}
				
				$this->load->model('catalog/product');
				$result = $this->model_catalog_product->getProduct($product['product_id']);
				$order_options = $this->getOrderOptions($order_id, $product['order_product_id']);
				
				$option_weight = $result['weight'];
				
				if($order_options){
					foreach($order_options as $order_option){
						
						$this->load->model('extension/shipping/tk_econt');
						$option = $this->model_extension_shipping_tk_econt->getProductOptionValue($product['product_id'], $order_option[0]['product_option_value_id']);
						
						if($option['weight_prefix'] == '+'){
							$option_weight += $option['weight'];
						} else if($option['weight_prefix'] == '-'){
							$option_weight -= $option['weight'];
						} else{
							$option_weight = $option['weight'];
						}
						
						if($this->config->get('shipping_tk_econt_shipment_product_name')){
							$shipment_description .= ' ';
							$shipment_description .= $option['name'] . '|';
						}
					}
				}
				 
				$weight_total = $option_weight;
				
				if($weight_total == 0 && $this->config->get('shipping_tk_econt_weight_total') && $this->config->get('shipping_tk_econt_weight_total') > 0){
					$weight_total = $this->config->get('shipping_tk_econt_weight_total');
				} 
				
				$totalPrice = $product['price']*$product['quantity'];
				$totalWeight = $weight_total*$product['quantity'];

				if($this->config->get('shipping_tk_econt_weight_type') && $this->config->get('shipping_tk_econt_weight_type') == 'gram'){
					$totalWeight = $totalWeight/1000;
				}
				
				if($totalWeight < 0.01){
					$totalWeight = 0.01;
				} 
				
				$url_prd = $this->url->link('product/product', 'product_id=' . $product['product_id'] );
				$url_prd = str_replace('admin/','', $url_prd);
				
				if($this->config->get('shipping_tk_econt_shipment_opis')){
					$product_name = $this->config->get('shipping_tk_econt_shipment_opis');
				} else{
					$product_name = $product['name'];
				}
				
				$order['items'][] = array(
					'name'        => $product_name,
					'SKU'        => $product['model'],
					'URL'        => $url_prd,
					'count'        => $product['quantity'],
					'hideCount'     => 1,
					'totalPrice'   => $totalPrice,
					'totalWeight'      => $totalWeight
				);
			}

		
			//данни за отстъпките
			$order_totals = $this->getOrderTotals($order_id);
			if(!empty($order_totals)){
				if($this->config->get('shipping_tk_econt_shipping_in')){
					$not_for_econt = array('sub_total','total');
				} else{
					$not_for_econt = array('sub_total','shipping','total');
				}
			
				foreach($order_totals as $order_total){
				
					if(!in_array($order_total['code'], $not_for_econt) && $order_total['value'] != 0){
						$order['items'][] = array(
							'name'        => $order_total['title'],
							'SKU'        => $order_total['code'],
							'URL'        => '#',
							'count'        => 1,
							'hideCount'     => 1,
							'totalPrice'   => $order_total['value'],
							'totalWeight'      => 0
						);
					}
				}
			}

			$aOrderObject = [];
			$aOrderObject['order'] = $order;
			$aOrderObject['orderData'] = $orderData;
			$aOrderObject['customerInfo'] = $customerInfo;
		}
		
		return $aOrderObject;
	}
}
